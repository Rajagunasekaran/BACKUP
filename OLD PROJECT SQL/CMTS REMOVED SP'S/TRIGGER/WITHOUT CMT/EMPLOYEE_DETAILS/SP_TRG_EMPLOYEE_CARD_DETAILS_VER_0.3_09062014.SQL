DROP PROCEDURE IF EXISTS SP_TRG_EMPLOYEE_CARD_DETAILS;
CREATE PROCEDURE SP_TRG_EMPLOYEE_CARD_DETAILS
( 
IN UASDID INTEGER,
IN CARD VARCHAR(10)
)
BEGIN
DECLARE MESSAGE_TEXT VARCHAR(100);
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
ROLLBACK;
END;
START TRANSACTION;
 IF(CARD='INSERT') THEN
    IF EXISTS (SELECT UASD_ID FROM EMPLOYEE_CARD_DETAILS WHERE UASD_ID=UASDID) THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT= 'CAN NOT UPDATE UASD_ID ';
    END IF;
 END IF;
 IF(CARD='UPDATE') THEN
    IF EXISTS (SELECT UASD_ID FROM EMPLOYEE_CARD_DETAILS WHERE UASD_ID=UASDID) THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT= 'CAN NOT UPDATE UASD_ID ';
    END IF;
 END IF;
 COMMIT;
 END;
DROP TRIGGER IF EXISTS TRG_EMPLOYEE_CARD_DETAILS_BEFOREINSERT;
CREATE TRIGGER TRG_EMPLOYEE_CARD_DETAILS_BEFOREINSERT BEFORE INSERT ON EMPLOYEE_CARD_DETAILS
FOR EACH ROW
BEGIN
          CALL SP_TRG_EMPLOYEE_CARD_DETAILS(NEW.UASD_ID,'INSERT');
END;
DROP TRIGGER IF EXISTS TRG_EMPLOYEE_CARD_DETAILS_BEFOREUPDATE;
CREATE TRIGGER TRG_EMPLOYEE_CARD_DETAILS_BEFOREUPDATE BEFORE UPDATE ON EMPLOYEE_CARD_DETAILS
FOR EACH ROW
BEGIN
          CALL SP_TRG_EMPLOYEE_CARD_DETAILS(NEW.UASD_ID,'UPDATE');
END;