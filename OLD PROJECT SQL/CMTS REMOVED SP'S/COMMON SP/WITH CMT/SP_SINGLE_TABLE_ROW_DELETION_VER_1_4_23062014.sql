-- VERSION 1.4 STARTDATE:23/06/2014 ENDDATE:23/06/2014 DESC:DROP THE TEMP TABLES IF ROLLBACK OCCURS. DONE BY :RAJA
--  VER:1.3, TRACKER: 742 COMMENT:#15 ,START DATE: 11-06-2014, END DATE: 11-06-2014, DESC: UPDATED CUSTOMER_ID IN TICKLER_HISTORY TABLE DONE BY: DHIVYA
--  VER:1.2, TRACKER: 566 COMMENT:#12 ,START DATE: 09-06-2014, END DATE: 09-06-2014, DESC: ADDED ROLLBACK AND COMMIIT DONE BY: SASIKALA
-- version 1.1 -- sdate:26/05/2014 -- edate:26/05/2014 -- issue:817 -- comment:117 -- DROP TEMP TABLE V_TEMP_TABLE_NAME -- doneby:RL
-- version 1.0 -- sdate:07/04/2014 -- edate:07/02/2014 -- issue:797 -- comment:28 -- doneby:SAFI	
-- version 0.9 -- sdate:05/03/2014 -- edate:05/03/2014 -- issue:598 -- comment:27 desc:added schema name-- doneby:dhivya	
-- version 0.8 -- sdate:28/02/2014 -- edate:28/02/2014 -- issue:754 -- comment:22 -- doneby:RL	
-- version 0.7 -- sdate:27/02/2014 -- edate:27/02/2014 -- issue:754 -- comment:22 -- doneby:RL	
--  VER:0.6, TRACKER: 746 COMMENT:# ,START DATE: 14-02-2014, END DATE: 14-02-2014, DESC: CHECKING WHETHER THE ROW ID TO BE DELETED IS AVAILABLE IN TABLE.IF NOT FLAG WILL RETURN 0 AND NOTHING WIL INSERT IN TICKLER HISTORY TABLE. DONE BY: MANIKANDAN S
--  VER:0.5, TRACKER: 746 COMMENT:#10 ,START DATE: 13-02-2014, END DATE: 13-02-2014, DESC: INCREASED VARIABLE SIZE. DONE BY: MANIKANDAN S
--  VER:0.4, TRACKER: 742 COMMENT:#5 ,START DATE: 12-02-2014, END DATE: 12-02-2014, DESC: REMOVED THE CODING LINE OF INSERTING VALUES IN TEMP TABLE WHICH I USED IT FOR PRINTING AND CHECKING VALUES. DONE BY: MANIKANDAN S
--  VER:0.3, TRACKER: 742 COMMENT:#12 ,START DATE: 12-02-2014, END DATE: 12-02-2014, DESC: FIXED ERROR Data too long for column 'V_TEMP_TABLE_NAME', SINCE TABLE NAME IS DYNAMIC I USED TEXT DATATYPE FOR V_TABLE_NAME DECLARATION/added out parameter for deletion flag. DONE BY: MANIKANDAN S
--  VER:0.2, TRACKER: 742 COMMENT:#9 & #10 ,START DATE: 11-02-2014, END DATE: 11-02-2014, DESC: REMOVED SCHEMA NAME FOR GETTING TABLE COLUMN NAMES, USED DISTINCT KEYWORD TO AVOID DUBLICATE COLUMNS FROM DIFFERENT SCHEMA/GIVEN DYNAMIC NAMES FOR TEMP TABLES BASED ON THE TABLE ID. DONE BY: MANIKANDAN S
--  VER:0.1, TRACKER: 742 ,START DATE: 08-02-2014, END DATE: 08-02-2014, DESC: SP FOR DELETING PARTICULAR ROW FROM TABLE AND SAVING THAT VALUES IN TICKLER HISTORY TABLE, DONE BY: MANIKANDAN S

DROP PROCEDURE IF EXISTS SP_SINGLE_TABLE_ROW_DELETION;
CREATE PROCEDURE SP_SINGLE_TABLE_ROW_DELETION(IN TABLE_ID INT, IN ROW_ID INT,IN V_USERSTAMP VARCHAR(50), OUT DELETION_FLAG SMALLINT(1))
BEGIN
	DECLARE V_TABLE_NAME        VARCHAR(64);
	DECLARE V_TEMP_TABLE_NAME   TEXT;
	DECLARE i                   INT DEFAULT 1;
	DECLARE V_COLUMN_VALUE      TEXT;
	DECLARE FINAL_DATA          TEXT DEFAULT '';
	DECLARE USERSTAMP_ID INTEGER(2);
	DECLARE CUSTOMERID INTEGER;
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
	  ROLLBACK;
  IF (V_TEMP_TABLE_NAME IS NOT NULL)THEN
		SET @DROPQUERY = (SELECT CONCAT('DROP TABLE IF EXISTS ',V_TEMP_TABLE_NAME,''));
		PREPARE DROPQUERYSTMT FROM @DROPQUERY;
		EXECUTE DROPQUERYSTMT;
	END IF;
	END;
  START TRANSACTION;
	CALL SP_CHANGE_USERSTAMP_AS_ULDID(V_USERSTAMP,@ULDID);
	SET USERSTAMP_ID = (SELECT @ULDID);
--  GETTING TABLE NAME USING TABLE ID
	SELECT TRIM(TTIP_DATA) INTO V_TABLE_NAME FROM TICKLER_TABID_PROFILE WHERE TTIP_ID = TABLE_ID;
--  GETTING COLUMN NAMES OF TABLE
	SET @SQL = CONCAT('SELECT DISTINCT COLUMN_NAME INTO @V_TABLE_PRIMAY_COLUMN_ID FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ''',V_TABLE_NAME,''' AND COLUMN_KEY = ','''PRI''' );
	PREPARE S1 FROM @SQL;
	EXECUTE S1;
	DEALLOCATE PREPARE S1;
 
	SET @SQL1 = CONCAT('SELECT COUNT(*) INTO @ROW_COUNT FROM ',V_TABLE_NAME,' WHERE ',@V_TABLE_PRIMAY_COLUMN_ID,' = ',ROW_ID);
    PREPARE s1 FROM @SQL1;
    EXECUTE s1;
    DEALLOCATE PREPARE s1;
   
	IF(@ROW_COUNT > 0) THEN
   
		SET V_TEMP_TABLE_NAME = CONCAT('TEMP_',V_TABLE_NAME,'_COLUMN_NAMES');
   
--  DROP TABLE IF ALREADY EXISTS
		SET @SQL = CONCAT('DROP TABLE IF EXISTS ',V_TEMP_TABLE_NAME);
		PREPARE S1 FROM @SQL;
		EXECUTE S1;
		DEALLOCATE PREPARE S1;

--  CREATING TEMP TABLE FOR SAVING TABLE COLUMN NAMES
		SET @SQL = CONCAT('CREATE TABLE ',V_TEMP_TABLE_NAME,' (ID INT NOT NULL AUTO_INCREMENT, COLUMN_NAME VARCHAR(30), PRIMARY KEY (ID))');
		PREPARE S1 FROM @SQL;
		EXECUTE S1;
		DEALLOCATE PREPARE S1;
 
--  INSERTING TABLE COLUMN NAMES IN TEMP TABLE
		SET @SQL = CONCAT('INSERT INTO ',V_TEMP_TABLE_NAME,'(COLUMN_NAME) SELECT DISTINCT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ''',V_TABLE_NAME,"'" );
		PREPARE S1 FROM @SQL;
		EXECUTE S1;
		DEALLOCATE PREPARE S1;
 
--  GETTING COUNT OF COLUMN NAMES FROM TEMP TABLE
		SET @SQL = CONCAT('SELECT COUNT(*) INTO @V_COLUMN_COUNT FROM ',V_TEMP_TABLE_NAME);
		PREPARE S1 FROM @SQL;
		EXECUTE S1;
		DEALLOCATE PREPARE S1;

--  ITERATE TEMP TABLE AND GET COLUMN NAMES FROM TEMP TABLE/ ALSO GETTING COLUMN VALUES FROM ORIGINAL TABLE.
		WHILE (@V_COLUMN_COUNT >= i) DO
--  GETTING COLUMN NAMES FROM TEMP TABLE
		   SET @SQL = CONCAT('SELECT COLUMN_NAME INTO @V_COLUMN_NAME FROM ',V_TEMP_TABLE_NAME,' WHERE ID = ',i);
		   PREPARE S1 FROM @SQL;
		   EXECUTE S1;
		   DEALLOCATE PREPARE S1;
--  GETTING COLUMN VALUES FROM ORIGINAL TABLE.
			SET @SQL1 = CONCAT('SELECT ',@V_COLUMN_NAME,' INTO @V_VALUE FROM ',V_TABLE_NAME,' WHERE ',@V_TABLE_PRIMAY_COLUMN_ID,' = ',ROW_ID);
			PREPARE s1 FROM @SQL1;
			EXECUTE s1;
			DEALLOCATE PREPARE s1;
   
			IF @V_VALUE IS null THEN
			  SET V_COLUMN_VALUE = 'null';
			ELSE
			  SET V_COLUMN_VALUE = @V_VALUE;
			END IF;
  
--  CONCATENATING EACH COLUMN NAME AND COLUMN VALUES
			SET FINAL_DATA = CONCAT(FINAL_DATA, @V_COLUMN_NAME, '=',V_COLUMN_VALUE,',');
			IF @V_COLUMN_NAME='CUSTOMER_ID' AND V_COLUMN_VALUE IS NOT NULL THEN
			SET CUSTOMERID=V_COLUMN_VALUE;
			END IF;
			SET i = i + 1;
		END WHILE;
  --  REMOVING COMMA FROM THE END OF THE FINAL_DATA
		SET FINAL_DATA = SUBSTRING(FINAL_DATA,1,CHAR_LENGTH(FINAL_DATA)-1);
		IF FINAL_DATA IS NOT NULL THEN
			IF CUSTOMERID IS NOT NULL THEN
			SET @SQL2 = CONCAT('DELETE FROM ',V_TABLE_NAME,' WHERE ',@V_TABLE_PRIMAY_COLUMN_ID,' = ',ROW_ID);
			PREPARE s2 FROM @SQL2;
			EXECUTE s2;
			DEALLOCATE PREPARE s2;
			INSERT INTO TICKLER_HISTORY (TP_ID, TTIP_ID,CUSTOMER_ID,TH_OLD_VALUE, ULD_ID)VALUES (2, TABLE_ID,CUSTOMERID, FINAL_DATA, USERSTAMP_ID);
			SET DELETION_FLAG = 1;
			ELSE

		--  DELETING PARTICULAR ROW FROM ORIGINAL TABLE
			SET @SQL2 = CONCAT('DELETE FROM ',V_TABLE_NAME,' WHERE ',@V_TABLE_PRIMAY_COLUMN_ID,' = ',ROW_ID);
			PREPARE s2 FROM @SQL2;
			EXECUTE s2;
			DEALLOCATE PREPARE s2;
			--  INSERTING DELETED VALUES FROM ORIGINAL TABLE IN TICKLER_HISTORY TABLE
			INSERT INTO TICKLER_HISTORY (TP_ID, TTIP_ID, TH_OLD_VALUE, ULD_ID)VALUES (2, TABLE_ID, FINAL_DATA, USERSTAMP_ID);
			SET DELETION_FLAG = 1;
			END IF;
		ELSE
			SET DELETION_FLAG = 0;
		END IF;		
	ELSE
		SET DELETION_FLAG = 0;
	END IF;
	IF (V_TEMP_TABLE_NAME IS NOT NULL)THEN
		SET @DROPQUERY = (SELECT CONCAT('DROP TABLE IF EXISTS ',V_TEMP_TABLE_NAME,''));
		PREPARE DROPQUERYSTMT FROM @DROPQUERY;
		EXECUTE DROPQUERYSTMT;
	END IF;
COMMIT;
END;