DROP PROCEDURE IF EXISTS SP_MIG_EXP_BABY_SLASHN_INVOICE_FROM_ITEM_SPLIT_INSERT;
CREATE PROCEDURE SP_MIG_EXP_BABY_SLASHN_INVOICE_FROM_ITEM_SPLIT_INSERT()
BEGIN
	DECLARE DONE INT DEFAULT FALSE;
	DECLARE PEID INTEGER;
	DECLARE BABYCOMMENTS TEXT;
	DECLARE ITEMLOCATION INTEGER;
	DECLARE FROMLOCATION INTEGER;
	DECLARE INVOICEITEM TEXT;
	DECLARE INVOICEFROM TEXT;
	DECLARE INVITEM TEXT;
	DECLARE INVFROM TEXT;
	DECLARE FILTER_CURSOR CURSOR FOR 
	SELECT PE_ID,PE_BABY_COMMENTS,PE_BABY_INVOICE_ITEMS,PE_BABY_INVOICE_FROM FROM VW_MIG_TEMP_EXP_BABY_SINGLE_SLASHN_REMAINING_COMMENTS;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE = TRUE;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
ROLLBACK;
END;
START TRANSACTION;
	DROP TABLE IF EXISTS TEMP_EXP_BABY_SLASHN_INVOICE_FROM_ITEM;
	CREATE TABLE TEMP_EXP_BABY_SLASHN_INVOICE_FROM_ITEM(ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,PE_ID INT NOT NULL ,PE_BABY_COMMENTS TEXT,PE_INVOICE_ITEM TEXT,PE_INVOICE_FROM TEXT);
	OPEN FILTER_CURSOR;
		read_loop: LOOP
			FETCH FILTER_CURSOR INTO PEID,BABYCOMMENTS,INVOICEITEM,INVOICEFROM;
			IF DONE THEN
				LEAVE read_loop;
			END IF;
			SET ITEMLOCATION=(SELECT LOCATE('\n',BABYCOMMENTS));
			SET FROMLOCATION=(SELECT LOCATE('\n\n',BABYCOMMENTS,ITEMLOCATION+1));
			SET INVITEM=(SELECT SUBSTRING(BABYCOMMENTS,ITEMLOCATION+1,FROMLOCATION-(ITEMLOCATION+1)));
			SET INVFROM=(SELECT SUBSTRING(BABYCOMMENTS,FROMLOCATION+2));
			IF(ITEMLOCATION!=0) AND (FROMLOCATION!=0) THEN
				INSERT INTO TEMP_EXP_BABY_SLASHN_INVOICE_FROM_ITEM(PE_ID,PE_BABY_COMMENTS,PE_INVOICE_ITEM,PE_INVOICE_FROM)VALUES(PEID,BABYCOMMENTS,INVITEM,INVFROM);
			END IF;
		END LOOP;
	CLOSE FILTER_CURSOR;
COMMIT;
END;