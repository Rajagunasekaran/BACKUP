--version 1.1--sdate:28/02/2014 --edate:28/02/2014 --issue:754 --comment:36 --doneby:RL
--version 1.0--sdate:27/02/2014 --edate:27/02/2014 --issue:754 --comment:22 --doneby:BHAVANI
-->version 0.9 -->startdate:25/02/2014 enddate:25/02/2014 -->issue no:755 comment no:#3 desc:CHANGE OF USERSTAMP IN TO ULDID IN SP_BANK_TT_INSERT done by:Bhavani.R
-->version 0.8 -->startdate:18/02/2014 enddate:18/02/2014 -->issue no:536 comment no:#56 desc:implementation of flag for success in SP_BANK_TT_INSERT done by:Bhavani.R
--version 0.7-->startdate:25/01/2014 enddate:27/01/2014 -->issue no:536 comment no:#39 desc:sp s updated as per table updation by:DHIVYA.A
--version 0.6-->startdate:09/11/2013 enddate:09/11/2013 -->issue no:636 comment no:#47 desc:changed sp name and file name done by:DHIVYA.A
--> version 0.5 -->startdate:11/10/2013  enddate:11/10/2013-->issueno:636 -->desc:changed the variable names as meaningful
-->doneby:DHIVYA.A
--> version 0.4 -->startdate:11/10/2013  enddate:11/10/2013-->issueno:636 -->desc:added comments
-->doneby:DHIVYA.A
---version 0.3 issue no:622 COMMENT:#15 start date:25/09/2013 and end date:25/09/2013 desc:added bank_address header for MODEL type insertion in bank_transfer table by:DHIVYA.A
---version 0.2 issue no:622 COMMENT:#9 start date:24/09/2013 and end date:24/09/2013 desc:removed debited on parameter by:DHIVYA.A
---version 0.1 issue no:622 COMMENT:#3 start date:21/09/2013 and end date:23/09/2013 desc:sp for BANKTT entry done by:DHIVYA.A

DROP PROCEDURE IF EXISTS SP_BANK_TT_INSERT;
CREATE PROCEDURE SP_BANK_TT_INSERT(
IN OCBCDATA VARCHAR(50),
IN BTMDATA VARCHAR(50),
IN UNITNO INTEGER,
IN CUSTOMERID INTEGER,
IN BTDATE DATE,
IN BTAMOUNT DECIMAL(7,2),
IN ACCOUNTNAME VARCHAR(40),
IN ACCOUNTNO VARCHAR(25),
IN BANKCODE VARCHAR(4),
IN BRANCHCODE VARCHAR(3),
IN ADDRESS VARCHAR(250),
IN SWIFTCODE VARCHAR(12),
IN CUSTOMERREFERENCE VARCHAR(200),
IN INVOICEDETAILS TEXT,
IN COMMENTS TEXT,
IN USERSTAMP VARCHAR(50),
OUT BANK_SUCCESSFLAG INTEGER)
BEGIN
-- VARIABLE DECLARATION
DECLARE TEMPOCBCDATA VARCHAR(50);
DECLARE OCBC_DATA VARCHAR(15);
DECLARE OCBC_LENGTH INTEGER;
DECLARE OCBC_POSITION INTEGER;
DECLARE USERSTAMP_ID INTEGER(2);
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
ROLLBACK;
END;
START TRANSACTION;
SET BANK_SUCCESSFLAG=0;
CALL SP_CHANGE_USERSTAMP_AS_ULDID(USERSTAMP,@ULDID);
SET USERSTAMP_ID = (SELECT @ULDID);
IF ((OCBCDATA IS NOT NULL) AND (BTDATE IS NOT NULL) AND (BTAMOUNT IS NOT NULL) AND (USERSTAMP IS NOT NULL))THEN
-- INSERT QUERY FOR BANK_TRANSFER
	INSERT INTO BANK_TRANSFER(BTM_ID,BT_DATE,BT_AMOUNT,BT_ACC_NAME,BT_ACC_NO,BT_BANK_CODE,BT_BRANCH_CODE,BT_BANK_ADDRESS,
	BT_SWIFT_CODE,BT_CUST_REF,BT_INV_DETAILS,BT_COMMENTS,ULD_ID)VALUES
	((SELECT BTM_ID FROM BANK_TRANSFER_MODELS WHERE BTM_DATA=BTMDATA),BTDATE,BTAMOUNT,ACCOUNTNAME,ACCOUNTNO,BANKCODE,
	BRANCHCODE,ADDRESS,SWIFTCODE,CUSTOMERREFERENCE,INVOICEDETAILS,COMMENTS,USERSTAMP_ID);
SET BANK_SUCCESSFLAG=1;
	IF OCBCDATA IS NOT NULL THEN
		SET TEMPOCBCDATA = OCBCDATA;
		SET OCBC_LENGTH = 1;
		loop_label : LOOP
		SET OCBC_POSITION=(SELECT LOCATE(',', TEMPOCBCDATA,OCBC_LENGTH));
	IF OCBC_POSITION<=0 THEN
		SET OCBC_DATA=TEMPOCBCDATA;
	ELSE
		SELECT SUBSTRING(TEMPOCBCDATA,OCBC_LENGTH,OCBC_POSITION-1) INTO OCBC_DATA;
		SET TEMPOCBCDATA=(SELECT SUBSTRING(TEMPOCBCDATA,OCBC_POSITION+1));
	END IF;
	
	IF ((OCBC_DATA!=' ') AND(OCBC_DATA!='MODEL')) THEN
		SET FOREIGN_KEY_CHECKS=0;
-- INSERT QUERY FOR BANK_TRANSFER_STATUS_DETAILS TABLE
		INSERT INTO BANK_TRANSFER_STATUS_DETAILS(BT_ID,BCN_ID,CGN_ID)VALUES((SELECT MAX(BT_ID)FROM BANK_TRANSFER),(SELECT BCN_ID FROM BANKTT_CONFIGURATION WHERE BCN_DATA=OCBC_DATA),(SELECT CGN_ID FROM BANKTT_CONFIGURATION WHERE BCN_DATA=OCBC_DATA));
		SET BANK_SUCCESSFLAG=1; 
    	END IF;
		IF OCBC_DATA='GIRO' OR OCBC_DATA='TT' THEN
		SET FOREIGN_KEY_CHECKS=0;
-- INSERT QUERY FOR BANK_TRANSFER_DETAIL TABLE
		INSERT INTO BANK_TRANSFER_DETAIL(UNIT_ID,CUSTOMER_ID,BT_ID)VALUES((SELECT UNIT_ID FROM UNIT WHERE UNIT_NO=UNITNO),CUSTOMERID,(SELECT MAX(BT_ID) FROM BANK_TRANSFER));
		SET BANK_SUCCESSFLAG=1;
    	END IF;
		IF OCBC_POSITION<=0 THEN
		LEAVE  loop_label;
	END IF;
	END LOOP;
	END IF;
END IF;
COMMIT;
END;