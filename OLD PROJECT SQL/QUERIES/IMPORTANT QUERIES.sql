-- SELECT QUERY SYNTAX

SELECT [ ALL | DISTINCT | DISTINCTROW ]
       [ HIGH_PRIORITY ]
       [ STRAIGHT_JOIN ]
       [ SQL_SMALL_RESULT | SQL_BIG_RESULT ] [ SQL_BUFFER_RESULT ]
       [ SQL_CACHE | SQL_NO_CACHE ]
       [ SQL_CALC_FOUND_ROWS ]
EXPRESSIONS
FROM TABLES
WHERE CONDITIONS
[ GROUP BY EXPRESSIONS ]
[ HAVING CONDITION ]
[ ORDER BY EXPRESSION [ ASC | DESC ] ]
[ LIMIT [OFFSET_VALUE] NUMBER_ROWS | LIMIT NUMBER_ROWS OFFSET OFFSET_VALUE ]
[ PROCEDURE PROCEDURE_NAME ]
[ INTO [ OUTFILE 'FILE_NAME' OPTIONS 
       | DUMPFILE 'FILE_NAME'
       | @VARIABLE1, @VARIABLE2, ... @VARIABLE_N ]
[ FOR UPDATE | LOCK IN SHARE MODE ];

-- CREATE SCHEMA QRY

CREATE SCHEMA TEST; 

-- CREATE TABLE LIKE ANOTHER TABLE IN ANOTHER SCHEMA

CREATE TABLE USER_LOGIN_DETAILS LIKE TEST_MIG.USER_LOGIN_DETAILS;

-- INSERT ALL VALUES FROM OTHER TABLE 

INSERT INTO USER_LOGIN_DETAILS SELECT * FROM USER_LOGIN_DETAILS;

-- SELECT USING IF CONDITION

IF(EXPR,IF_TRUE_EXPR,IF_FALSE_EXPR);

SELECT IF(1 = 2,'TRUE','FALSE'); -- FALSE
SELECT IF(1 = 1,' TRUE','FALSE'); -- TRUE

SELECT CUSTOMERNUMBER,
       CUSTOMERNAME,
       IF(STATE IS NULL,'N/A',STATE) STATE, -- IF STATE NULL MEANS DISPLAYS 'N/A' INSTEAD OF NULL
       COUNTRY
FROM CUSTOMERS;

SELECT IF( CC_LAST_NAME IS NOT NULL,CONCAT(CC_FIRST_NAME,' ', CC_LAST_NAME),CONCAT(CC_FIRST_NAME))AS NAME,  CC_STARTDATE, CC_ENDDATE, CC_CARD_NO, CC_UNIT_NO  
FROM CUSTOMER_SCDB_FORMAT WHERE CC_CARD_NO IS NOT NULL;

-- ALTER COLUMN SYNTAX

ALTER [ONLINE | OFFLINE] [IGNORE] TABLE TBL_NAME 
CHANGE [COLUMN] OLD_COL_NAME NEW_COL_NAME COLUMN_DEFINITION 
[FIRST|AFTER COL_NAME];

ALTER TABLE EMPLOYEE_DETAIL RENAME EMPLOYEE_DETAILS;

ALTER TABLE EMPLOYEE_DETAILS MODIFY EMP_MOBILE_NO VARCHAR(10),CHANGE EMP_PERSONAL_MOBILE_NUMBER EMP_ALT_MOBILE_NO VARCHAR(10);

-- SLPITING NAMES USING SUBSRING INDEX()

DROP TABLE IF EXISTS RENTAL_CUSTOMER;
CREATE TABLE RENTAL_CUSTOMER(NAME VARCHAR(255));
INSERT INTO RENTAL_CUSTOMER (NAME) (SELECT RENTAL_CUSTOMER FROM SOURCE_17072014.RENTAL_SCDB_FORMAT);
ALTER TABLE `RENTAL_CUSTOMER` ADD `FIRST_NAME` VARCHAR(64) NOT NULL, ADD `LAST_NAME` VARCHAR(64) NOT NULL;
UPDATE `RENTAL_CUSTOMER` SET `FIRST_NAME` = SUBSTRING_INDEX(`NAME`, '_', 1), `LAST_NAME` = SUBSTRING_INDEX(`NAME`, '_', -1);

-- DROP COLUMN

ALTER TABLE `RENTAL_CUSTOMER` DROP `NAME`;

-- ALTER THE SP FOREIGN KEY

ALTER TABLE `EXPENSE_CARPARK` DROP FOREIGN KEY `EXPENSE_CARPARK_IBFK_1`;

ALTER TABLE `EXPENSE_CARPARK` ADD CONSTRAINT EXPENSE_CARPARK_IBFK_1 FOREIGN KEY (EDCP_ID) REFERENCES EXPENSE_DETAIL_CAR_PARK (EDCP_ID) ;

-- ALTER THE AUTO_INCREMENT ID IN SEQUENCE FOR NEXT TIME INSERTING

ALTER TABLE CONFIGURATION_PROFILE AUTO_INCREMENT = 5;

SET @ALTER_CONFIGURATION_PROFILE =(SELECT CONCAT('ALTER TABLE ',DESTINATIONSCHEMA,'.CONFIGURATION_PROFILE AUTO_INCREMENT = 6'));
PREPARE ALTER_CONFIGURATION_PROFILE_STMT FROM @ALTER_CONFIGURATION_PROFILE;
EXECUTE ALTER_CONFIGURATION_PROFILE_STMT;

-- QUERY FOR ALTER AUTO_INCREMENT 

SET @MAXID = (SELECT CONCAT('SELECT MAX(CNP_ID) INTO @CONFIG_PROFILE_MAX_ID FROM ',DESTINATIONSCHEMA,'.CONFIGURATION_PROFILE'));
PREPARE MAX_ID_STMT FROM @MAXID;
EXECUTE MAX_ID_STMT;
SET MAX_ID=@CONFIG_PROFILE_MAX_ID;
IF (MAX_ID IS NOT NULL) THEN    
  SET @ALTER_CONFIGURATION_PROFILE =(SELECT CONCAT('ALTER TABLE ',DESTINATIONSCHEMA,'.CONFIGURATION_PROFILE AUTO_INCREMENT=',MAX_ID));
  PREPARE ALTER_CONFIGURATION_PROFILE_STMT FROM @ALTER_CONFIGURATION_PROFILE;
  EXECUTE ALTER_CONFIGURATION_PROFILE_STMT;
END IF;

-- INSTEAD OF BETWEEN

SELECT CC_FIRST_NAME,CC_LAST_NAME,CC_STARTDATE, CC_ENDDATE, CC_CARD_NO, CC_UNIT_NO , CC_REC_VER
FROM CUSTOMER_SCDB_FORMAT WHERE CC_CARD_NO=13191 AND  CC_UNIT_NO =2317
AND CC_STARTDATE >= '2011-0S4-29' AND CC_ENDDATE <= '2011-1S1-25';

-- SELECT USING BETWEEN 

SELECT CC_FIRST_NAME,CC_LAST_NAME,CC_STARTDATE, CC_ENDDATE, CC_CARD_NO, CC_UNIT_NO , CC_REC_VER
FROM CUSTOMER_SCDB_FORMAT WHERE CC_CARD_NO=13831 AND  CC_UNIT_NO =2718
AND ((CC_STARTDATE BETWEEN '2011-08-01' AND	'2011-10-31') OR (CC_ENDDATE BETWEEN '2011-08-01' AND	'2011-10-31'));

SELECT * FROM TEMP_CARD_20140730221700_223 WHERE UASD_ID=296
AND ((STARTDATE BETWEEN DATE_SUB('2013-05-31', INTERVAL 1 DAY) AND DATE_SUB('2013-06-30', INTERVAL 1 DAY)) 
OR (ENDDATE BETWEEN DATE_SUB('2013-05-31', INTERVAL 1 DAY)
AND DATE_SUB('2013-06-30', INTERVAL 1 DAY))) AND ID > 5;

-- SUB QUERY

SELECT CUSTOMER_ID,MAX(CED_REC_VER) AS REC_VER, CLP_STARTDATE, CLP_ENDDATE, CLP_PRETERMINATE_DATE
FROM CUSTOMER_LP_DETAILS C1 WHERE CUSTOMER_ID=2 
AND CED_REC_VER =(SELECT MAX(CED_REC_VER) FROM CUSTOMER_LP_DETAILS C1 WHERE CUSTOMER_ID=2) AND CLP_GUEST_CARD IS NULL;

-- SELECT NO OF ROWS

SELECT * FROM USER_ADMIN_REPORT_DETAILS LIMIT 15;

-- SELECT THE MULTIPLE ROWS IN A WHERE CONDITON

SELECT * FROM SOURCE_17062014.MIG_BANK_TRANSFER
WHERE BT_CUSTOMER IN('LEONG KIAN SHIANG','RIN NAN YOONG','MAUNG KHIN MAUNG WIN');

-- SELECT THE MORE THAN 1 VALUES  IN THE COLUMN

SELECT *  
FROM CHEQUE_ENTRY_DETAILS  
GROUP BY CHEQUE_NO  
HAVING COUNT(CHEQUE_NO) >1;

-- FUNCTION FOR SPLITING STRING

CREATE FUNCTION SPLIT_STR(
  x VARCHAR(255),
  delim VARCHAR(12),
  pos INT
)
RETURNS VARCHAR(255)
RETURN REPLACE(SUBSTRING(SUBSTRING_INDEX(x, delim, pos),LENGTH(SUBSTRING_INDEX(x, delim, pos -1)) + 1), delim, '');

SELECT SPLIT_STR('RESABSENTFLDKS', 'ABSENT', 1) as third;

-- SELECT COUNT

SELECT COUNT(DISTINCT PD_AMOUNT )FROM PAYMENT_DETAILS ;

-- SELECT THE STRING VALUES IF GREATER THAN THE GIVEN VALUES

SELECT *FROM SOURCE_12052014.UNIT_SCDB_FORMAT WHERE  CHAR_LENGTH(UNIT_WEBLOGIN)>8 ;

-- UPDATE TABLE USING INNER JOIN

UPDATE TEMP_ATTENDANCE_CALCULATION20140927134024_1 X INNER JOIN (SELECT UARD.UARD_DATE,AC.AC_DATA FROM USER_ADMIN_REPORT_DETAILS UARD,ATTENDANCE_CONFIGURATION AC 
WHERE UARD.ULD_ID=1 AND UARD.UARD_DATE BETWEEN "2014-07-01" AND "2014-07-31" AND UARD.UARD_PERMISSION IS NOT NULL AND UARD.UARD_PERMISSION=AC.AC_ID) Y
ON X.REPORT_DATE=Y.UARD_DATE SET X.PERMISSION_HRS=Y.AC_DATA;

-- INNER JOIN

SELECT C.CUSTOMER_ID FROM SOURCE_12072014.ACCESS_SCDB_FORMAT ASF
INNER JOIN CUSTOMER C ON (ASF.AC_FIRST_NAME=C.CUSTOMER_FIRST_NAME AND ASF.AC_LAST_NAME=C.CUSTOMER_LAST_NAME)
OR(C.CUSTOMER_FIRST_NAME=ASF.AC_FIRST_NAME AND C.CUSTOMER_LAST_NAME=ASF.AC_FIRST_NAME)
INNER JOIN CUSTOMER_ACCESS_CARD_DETAILS CACD 
WHERE C.CUSTOMER_ID = CACD.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID;

SELECT DISTINCT A.EXP_UNIT_GCC,A.EXP_UNIT_NO,B.UNIT_NO,B.UNIT_ID,C.UNIT_ID,C.ECN_ID,D.ECN_ID, D.ECN_DATA,C.EU_INVOICE_DATE,A.EXP_UNIT_INVOICE_DATE 
FROM SOURCE_SCHEMA.BIZ_DAILY_SCDB_FORMAT A 
INNER JOIN UNIT B ON A.EXP_UNIT_NO=B.UNIT_NO
INNER JOIN EXPENSE_UNIT C ON B.UNIT_ID=C.UNIT_ID  AND C.EU_INVOICE_DATE=A.EXP_UNIT_INVOICE_DATE
INNER JOIN EXPENSE_CONFIGURATION D ON C.ECN_ID=D.ECN_ID   WHERE A.EXP_UNIT_GCC IS NOT NULL AND D.ECN_DATA IS NOT NULL ;

SELECT DISTINCT A.SE_SALARY_AMOUNT ,A.SE_SALARY_FIRST_NAME,B.EMP_FIRST_NAME,B.EMP_ID , C.EMP_ID,A.SE_SALARY_LAST_NAME,B.EMP_LAST_NAME,A.SE_SALARY_AMOUNT,C.EDSS_SALARY_AMOUNT,C.EDSS_ID , D.EDSS_ID,C.EDSS_SALARY_AMOUNT,D.ESS_SALARY_AMOUNT,A.SE_LEVY_AMOUNT,C.EDSS_LEVY_AMOUNT , A.SE_CPF_AMOUNT,C.EDSS_CPF_AMOUNT,C.EDSS_LEVY_AMOUNT,D.ESS_LEVY_AMOUNT ,C.EDSS_CPF_AMOUNT,D.ESS_CPF_AMOUNT 
FROM SOURCE_SCHEMA.STAFF_DAILY_SCDB_FORMAT A 
INNER JOIN SAFI_DEST.EMPLOYEE_DETAILS B ON ((A.SE_SALARY_FIRST_NAME=B.EMP_FIRST_NAME)AND(A.SE_SALARY_LAST_NAME=B.EMP_LAST_NAME)) 
INNER JOIN EXPENSE_DETAIL_STAFF_SALARY C ON ((B.EMP_ID = C.EMP_ID) AND (A.SE_SALARY_AMOUNT=C.EDSS_SALARY_AMOUNT)) OR ((A.SE_LEVY_AMOUNT=C.EDSS_LEVY_AMOUNT AND A.SE_CPF_AMOUNT=C.EDSS_CPF_AMOUNT) )
INNER JOIN EXPENSE_STAFF_SALARY D ON ((C.EDSS_ID = D.EDSS_ID) AND (C.EDSS_SALARY_AMOUNT=D.ESS_SALARY_AMOUNT)) OR ((C.EDSS_LEVY_AMOUNT=D.ESS_LEVY_AMOUNT AND C.EDSS_CPF_AMOUNT=D.ESS_CPF_AMOUNT ));

SELECT BT.*
FROM SOURCE_12052014.MIG_BANK_TRANSFER MBT
INNER JOIN SOURCE_12052014.MIG_BANK_TRANSFER_CREATED_BY BTCB ON MBT.BTCB_ID=BTCB.BTCB_ID
INNER JOIN SOURCE_12052014.MIG_BANK_TRANSFER_CHARGES_TO BTCT ON MBT.BTCT_ID=BTCT.BTCT_ID 
INNER JOIN SOURCE_12052014.MIG_BANK_TRANSFER_STATUS BTS ON MBT.BTS_ID = BTS.BTS_ID  
INNER JOIN BANKTT_CONFIGURATION BC ON  BTCB.BTCB_DATA=BC.BCN_DATA OR BTCT.BTCT_DATA=BC.BCN_DATA OR BTS.BTS_DATA=BC.BCN_DATA
INNER JOIN BANK_TRANSFER_STATUS_DETAILS BTSD ON BC.BCN_ID = BTSD.BCN_ID AND BC.CGN_ID = BTSD.CGN_ID
INNER JOIN BANK_TRANSFER BT ON BTSD.BT_ID = BT.BT_ID GROUP BY BT.BT_ID;

INSERT INTO CUST(UNIT,BT_CUST)(SELECT U.UNIT_ID,BT.BT_CUSTOMER
FROM SCDB_SOURCE_17062014.MIG_BANK_TRANSFER BT
LEFT JOIN UNIT U ON BT.BT_UNIT=U.UNIT_NO
INNER JOIN CUSTOMER C ON BT.BT_CUSTOMER=CONCAT(C.CUSTOMER_FIRST_NAME,' ', C.CUSTOMER_LAST_NAME) OR  BT.BT_CUSTOMER=C.CUSTOMER_FIRST_NAME-- OR SUBSTRING(BT.BT_CUSTOMER,1,3)=C.CUSTOMER_FIRST_NAME
WHERE BT.BT_TRANSACTION_TYPE IS NOT NULL AND BT.BT_CUSTOMER IS NOT NULL GROUP BY BT.BT_SNO);

SELECT U.UNIT_ID ,BT_CUSTOMER FROM SOURCE_17062014.MIG_BANK_TRANSFER S
INNER JOIN UNIT U ON U.UNIT_NO=S.BT_UNIT
WHERE S.BT_CUSTOMER NOT IN (SELECT BT_CUST FROM CUST);

-- SELECT USING NOT IN

SELECT DISTINCT PE_PERSONAL_AMOUNT
FROM SOURCE_SCHEMA. PERSONAL_SCDB_FORMAT
WHERE PE_PERSONAL_AMOUNT NOT IN      
(        
SELECT  EP_AMOUNT
FROM EXPENSE_PERSONAL     
);

SELECT * FROM DB_A.TBL_DATA
WHERE (COL1, COL2, COL3, ... ) NOT IN
(SELECT COL1, COL2, COL3, ... FROM DB_B.TBL_DATA);

-- SELECT USING RIGHT JOIN

SELECT DISTINCT  EP. EP_INVOICE_FROM,PSF.PE_PERSONAL_INVOICE_FROM 
FROM SOURCE_SCHEMA.PERSONAL_SCDB_FORMAT PSF 
RIGHT JOIN EXPENSE_PERSONAL EP ON  EP. EP_INVOICE_FROM=PSF.PE_PERSONAL_INVOICE_FROM;

-- SELECT USING LEFT JOIN

SELECT DISTINCT EB.EB_AMOUNT,PSF.PE_BABY_AMOUNT
FROM SOURCE_SCHEMA.PERSONAL_SCDB_FORMAT PSF
LEFT JOIN EXPENSE_BABY EB  ON EB.EB_AMOUNT=PSF.PE_BABY_AMOUNT ;

-- SELECT TIME STAMP USING FUNCTION

SELECT SUBTIME(C.TIMESTAMP,'08:00:00') ,A.UA_TIMESTAMP, B.ULD_TIMESTAMP
FROM SAFI_SOURCE.USER_RIGHTS_SCDB_FORMAT C ,USER_ACCESS A, USER_LOGIN_DETAILS B 
WHERE URECVER=1 ORDER BY URROLES;

SELECT DISTINCT RC.RC_ID, RC.RC_NAME,  RC. RC_TIMESTAMP, SUBTIME(SC.TIMESTAMP, '08:00:00') 
FROM ROLE_CREATION RC, SAFI_SOURCE.USER_RIGHTS_SCDB_FORMAT SC
WHERE RC.RC_TIMESTAMP=SUBTIME(SC.TIMESTAMP, '08:00:00');

-- CALCULATE THE TIME

SELECT SEC_TO_TIME(SUM(TIME_TO_SEC(duration)));

-- CHECKING LENGTH OF AMOUNT

IF (NEW_CPF_AMOUNT IS NOT NULL) THEN
  SET @CPF_AMT=(SELECT SUBSTRING_INDEX(NEW_CPF_AMOUNT, '.', 1));
  -- CHECKING THE LENGTH OF THE AMOUNT
  IF(LENGTH(@CPF_AMT)>5) THEN
		SET ERRORMSG=(SELECT EMC_DATA FROM ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID=567);
    SET ERRORMSG=(SELECT REPLACE (ERRORMSG,'[DIGIT]','5'));
    SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = ERRORMSG;
  END IF;
END IF;

-- CONVERT DATE AS STRING MONTH AND YEAR (MAY-2012)

SET MONTH_FORPERIOD=(SELECT MONTH(FORPERIOD));
SET YEAR_FORPERIOD=(SELECT YEAR(FORPERIOD));
SET MONTH_NAME=(SELECT UCASE(MONTHNAME(STR_TO_DATE(MONTH_FORPERIOD, '%m'))));
SET MONTH_YEAR=(SELECT CONCAT(MONTH_NAME,'-',YEAR_FORPERIOD));

SET ERRORMSG=(SELECT EMC_DATA FROM ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID=558);
SET ERRORMSG=(SELECT REPLACE(ERRORMSG,'[MONTH]',MONTH_YEAR));

-- CONVERT ANY DATE AS START DATE (2013-02-18 -> 2013-02-01)

SELECT ADDDATE(LAST_DAY(SUBDATE(ENDDATE, INTERVAL 1 MONTH)), 1);
SELECT ADDDATE(LAST_DAY(SUBDATE('2013-02-18', INTERVAL 1 MONTH)), 1);

-- CONCAT

SET CUSTOMER_FNAME=(SELECT CUSTOMER_FIRST_NAME FROM CUSTOMER WHERE CUSTOMER_ID=CUSTOMERID);
SET CUSTOMER_LNAME=(SELECT CUSTOMER_LAST_NAME FROM CUSTOMER WHERE CUSTOMER_ID=CUSTOMERID);
SET CUSTOMERNAME=(SELECT CONCAT(CUSTOMER_FNAME,'_',CUSTOMER_LNAME));

SET ERRORMSG=(SELECT EMC_DATA FROM ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID=560);
SET ERRORMSG=(SELECT REPLACE(ERRORMSG,'[CUSTOMER]',CUSTOMERNAME));

-- REPLACE 

SET ERRORMSG=(SELECT REPLACE(ERRORMSG,'[CUSTOMER]',CUSTOMERNAME));
SELECT REPLACE(REPLACE(REPLACE('REASON-Due to-personal (reason)','(',''), '-', ' '),')', '');

-- INSERT VALUE FROM 1 TO ANOTHER USIN SELECT

INSERT INTO TEMP_CUSTOMER_EXPIRY_EQUAL_DATE20140505111444_5
SELECT CTD.CUSTOMER_ID,C3.CUSTOMER_FIRST_NAME,C3.CUSTOMER_LAST_NAME,CTD.CED_REC_VER,U.UNIT_NO,CTD.CLP_STARTDATE,CTD.CLP_ENDDATE,CTD.CLP_PRETERMINATE_DATE,URTD.URTD_ROOM_TYPE,CED.CED_EXTENSION,CED.CED_RECHECKIN,E1.CC_PAYMENT_AMOUNT,E1.CC_DEPOSIT,E1.CC_PROCESSING_FEE,CPD.CPD_COMMENTS,ULD.ULD_LOGINID,CTD.CLP_TIMESTAMP 
FROM CUSTOMER_LP_DETAILS CTD,CUSTOMER_ENTRY_DETAILS CED,EXPIRY_MAXRECVER E,TEMP_ALL_CUSTOMER_EXPIRY_LIST_FEE_DETAIL20140505111444_5 E1,CUSTOMER_PERSONAL_DETAILS CPD,UNIT_ACCESS_STAMP_DETAILS UASD,UNIT_ROOM_TYPE_DETAILS URTD,UNIT U,CUSTOMER C3,USER_LOGIN_DETAILS ULD 
WHERE ULD.ULD_ID=CTD.ULD_ID AND CED.CUSTOMER_ID=CTD.CUSTOMER_ID AND CED.CED_REC_VER=CTD.CED_REC_VER AND ULD.ULD_ID=CTD.ULD_ID AND CTD.CLP_GUEST_CARD IS NULL AND E.CUSTOMER_ID=CED.CUSTOMER_ID AND E.CUSTOMER_ID=CTD.CUSTOMER_ID AND E.REC_VER=CED.CED_REC_VER AND E.REC_VER=CTD.CED_REC_VER AND CTD.CLP_TERMINATE IS NULL AND CED.CED_CANCEL_DATE IS NULL AND CPD.CUSTOMER_ID=CTD.CUSTOMER_ID AND CPD.CUSTOMER_ID=CED.CUSTOMER_ID AND E1.CUSTOMER_ID=CED.CUSTOMER_ID AND E1.CUSTOMER_ID=CTD.CUSTOMER_ID AND E1.CUSTOMER_VER=CED.CED_REC_VER AND E1.CUSTOMER_VER=CTD.CED_REC_VER AND E.REC_VER=E1.CUSTOMER_VER AND E.CUSTOMER_ID=E1.CUSTOMER_ID AND CED.UASD_ID=UASD.UASD_ID AND UASD.URTD_ID=URTD.URTD_ID AND U.UNIT_ID=CED.UNIT_ID AND C3.CUSTOMER_ID=CTD.CUSTOMER_ID AND C3.CUSTOMER_ID=CED.CUSTOMER_ID AND E.CUSTOMER_ID=C3.CUSTOMER_ID AND E1.CUSTOMER_ID=C3.CUSTOMER_ID AND C3.CUSTOMER_ID=CPD.CUSTOMER_ID AND
IF(CTD.CLP_PRETERMINATE_DATE IS NOT NULL,CTD.CLP_PRETERMINATE_DATE='2014-08-31',CTD.CLP_ENDDATE='2014-08-31') 
GROUP BY CTD.CUSTOMER_ID  
ORDER BY U.UNIT_NO,C3.CUSTOMER_FIRST_NAME;

-- ADD THE TIME STAMP AND USERSTAMP ID WITH TEMP TABLE
-- TEMP TABLE NAME START

CALL SP_CHANGE_USERSTAMP_AS_ULDID(USERSTAMP,@ULDID);
SET USERSTAMP_ID=(SELECT @ULDID);
SET INTERMEDIATE_UNIT_GROSS_NET_REVENUE_ALLUNIT=(SELECT CONCAT('INTERMEDIATE_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT',SYSDATE()));
--  TEMP TABLE NAME
SET INTERMEDIATE_UNIT_GROSS_NET_REVENUE_ALLUNIT=(SELECT REPLACE(INTERMEDIATE_UNIT_GROSS_NET_REVENUE_ALLUNIT,' ',''));
SET INTERMEDIATE_UNIT_GROSS_NET_REVENUE_ALLUNIT=(SELECT REPLACE(INTERMEDIATE_UNIT_GROSS_NET_REVENUE_ALLUNIT,'-',''));
SET INTERMEDIATE_UNIT_GROSS_NET_REVENUE_ALLUNIT=(SELECT REPLACE(INTERMEDIATE_UNIT_GROSS_NET_REVENUE_ALLUNIT,':',''));
SET INTERMEDIATE_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT=(SELECT CONCAT(INTERMEDIATE_UNIT_GROSS_NET_REVENUE_ALLUNIT,'_',USERSTAMP_ID)); 

-- ALL THE VALUES ALL DECLARED IN SP
-- CREATE DYNAMIC VIEW BY CALL THE 1 SP IN 1 SP
-- THIS ARE FROM SP INPUT INPUT_UNIT_NO, FROM_DATE, TO_DATE

DECLARE CHARTS_GROSS_REVENUE_PERUNIT TEXT;

CALL SP_CHARTS_GROSS_REVENUE_PERUNIT(INPUT_UNIT_NO, FROM_DATE, TO_DATE,'ADMIN@EXPATSINT.COM',@TEMP_CHARTS_GROSS_REVENUE_PERUNIT);
SET CHARTS_GROSS_REVENUE_PERUNIT= (SELECT @TEMP_CHARTS_GROSS_REVENUE_PERUNIT);

SET @VW_REVENUE=(SELECT CONCAT('CREATE OR REPLACE VIEW VIEW_CHARTS_GROSS_REVENUE_PERUNIT AS SELECT MONTH_YEAR, GROSS_REVENUE FROM ',CHARTS_GROSS_REVENUE_PERUNIT));
PREPARE CREATE_VIEW_CHARTS_GROSS_REVENUE_PERUNIT_STMT FROM @VW_REVENUE;
EXECUTE CREATE_VIEW_CHARTS_GROSS_REVENUE_PERUNIT_STMT;

-- CREATE DYNAMIC TABLE IN SP

SET @CREATE_INTERMEDIATE_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT=(SELECT CONCAT('CREATE TABLE ',INTERMEDIATE_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT,' (UNIT_NUMBER INT, GROSS_REVENUE DECIMAL(20,2) DEFAULT 0,TOT_RENTAL_EXPENSE DECIMAL(20,2) DEFAULT 0,NET_REVENUE DECIMAL(20,2) DEFAULT 0, UNIT_RENTAL INT DEFAULT 0, TOT_BIZ_EXPENSE DECIMAL(20,2) DEFAULT 0, SORT_DATE DATE)'));
PREPARE CREATE_INTERMEDIATE_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT_STMT FROM @CREATE_INTERMEDIATE_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT;
EXECUTE CREATE_INTERMEDIATE_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT_STMT;

-- INSERT THE VALUE IN DYNAMIC TABLE

SET @INSERT_INTERMEDIATE_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT=(SELECT CONCAT('INSERT INTO ',INTERMEDIATE_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT,' (UNIT_NUMBER, GROSS_REVENUE) (SELECT UNIT_NUMBER, GROSS_REVENUE FROM VIEW_CHARTS_GROSS_REVENUE_ALLUNIT)'));
PREPARE INSERT_INTERMEDIATE_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT_STMT FROM @INSERT_INTERMEDIATE_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT;
EXECUTE INSERT_INTERMEDIATE_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT_STMT;

-- CREATE ANOTHER TMP TABLE IN SAME SP 

SET @CREATE_TEMP_CHARTS_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT=(SELECT CONCAT('CREATE TABLE ',TEMP_CHARTS_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT,'(UNIT_NUMBER INT, GROSS_REVENUE DECIMAL(30,2),TOT_RENTAL_EXPENSE DECIMAL(30,2),NET_REVENUE DECIMAL(30,2), UNIT_RENTAL INT, TOT_BIZ_EXPENSE DECIMAL(30,2))'));
PREPARE CREATE_TEMP_CHARTS_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT_STMT FROM @CREATE_TEMP_CHARTS_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT;
EXECUTE CREATE_TEMP_CHARTS_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT_STMT;

-- INSERT VALUE FOR ABOVE TEMP TABLE

SET @INSERT_TEMP_CHARTS_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT=(SELECT CONCAT('INSERT INTO ',TEMP_CHARTS_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT,'(UNIT_NUMBER, GROSS_REVENUE, TOT_RENTAL_EXPENSE,NET_REVENUE, UNIT_RENTAL, TOT_BIZ_EXPENSE) (SELECT UNIT_NUMBER, SUM(GROSS_REVENUE),SUM(TOT_RENTAL_EXPENSE),SUM(NET_REVENUE), SUM(UNIT_RENTAL),SUM(TOT_BIZ_EXPENSE) FROM ',INTERMEDIATE_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT,' GROUP BY UNIT_NUMBER ORDER BY UNIT_NUMBER ASC)'));
PREPARE INSERT_TEMP_CHARTS_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT_STMT FROM @INSERT_TEMP_CHARTS_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT;
EXECUTE INSERT_TEMP_CHARTS_UNIT_GROSS_AND_NET_REVENUE_ALLUNIT_STMT;

-- ANOTHER CONCAT QUERY 

SET L_SQL= CONCAT_WS(' ','INSERT INTO ',TEMP_CHARTS_SINGLE_PERSONAL_EXPENSE,' (MONTH_YEAR,AMOUNT) SELECT ','DATE_FORMAT(',INVOICE,',','''%M-%Y''','),','SUM( ',AMT,' ) FROM ',TABLENAME,' WHERE ',INVOICE,' BETWEEN ''',FINAL_FROM_DATE,''' AND ''',FINAL_TO_DATE,''' GROUP BY YEAR(',INVOICE,'), MONTH(',INVOICE,') ASC');
SET @SQL=L_SQL;
PREPARE S1 FROM @SQL;
EXECUTE S1;
DEALLOCATE PREPARE S1;

-- MIN AND MAX ID'S OF COLUMN

SET @MIN_ID = (SELECT CONCAT('SELECT MIN(URC_ID) INTO @MIN_ID FROM ',DESTINATIONSCHEMA,'.USER_RIGHTS_CONFIGURATION'));
PREPARE MIN_ID_STMT FROM @MIN_ID;
EXECUTE MIN_ID_STMT;
SET @MAX_ID = (SELECT CONCAT('SELECT MAX(URC_ID) INTO @MAX_ID FROM ',DESTINATIONSCHEMA,'.USER_RIGHTS_CONFIGURATION'));
PREPARE MAX_ID_STMT FROM @MAX_ID;
EXECUTE MAX_ID_STMT;
SET MIN_ID = @MIN_ID;
SET MAX_ID = @MAX_ID;
WHILE(MIN_ID <= MAX_ID)DO
  --STATMENTS HERE;
  SET MIN_ID = MIN_ID+1;
END WHILE;
-- INSERT QUERY

INSERT INTO TEMP_INSERT_MENU20140515170826_1(RC_ID,MP_ID)VALUES((SELECT RC_ID FROM ROLE_CREATION WHERE RC_NAME="ADMIN"),47);
INSERT INTO TEMP_REMOVE_MENU20140515170826_1(RC_ID, MP_ID)SELECT U.RC_ID,U.MP_ID FROM USER_MENU_DETAILS U LEFT JOIN TEMP_INSERT_MENU20140515170826_1 T ON  U.MP_ID=T.MP_ID WHERE T.MP_ID IS NULL AND U.RC_ID=(SELECT RC_ID FROM ROLE_CREATION WHERE RC_NAME="ADMIN");
INSERT INTO TEMP_INSERT_FILE20140515170826_1(RC_ID,FP_ID)VALUES((SELECT RC_ID FROM ROLE_CREATION WHERE RC_NAME="ADMIN"),3);
INSERT INTO TEMP_REMOVE_FILE20140515170826_1 SELECT U.RC_ID,U.FP_ID FROM USER_FILE_DETAILS U LEFT JOIN TEMP_INSERT_FILE20140515170826_1 T ON  U.FP_ID=T.FP_ID WHERE T.FP_ID IS NULL AND U.RC_ID=(SELECT RC_ID FROM ROLE_CREATION WHERE RC_NAME="ADMIN");
DELETE FROM USER_FILE_DETAILS WHERE FP_ID IN(SELECT FP_ID FROM TEMP_REMOVE_FILE20140515170826_1)AND RC_ID IN(SELECT RC_ID FROM TEMP_REMOVE_FILE20140515170826_1);

DROP TABLE IF EXISTS CUST;
CREATE TABLE CUST (BTSNO INT,UNITID INT,BT_UNITNO INT,CC_UNITNO INT,BT_CUST VARCHAR(50),CC_CUST_ID INT);

INSERT INTO CUST(BTSNO,UNITID,BT_UNITNO,CC_UNITNO,BT_CUST,CC_CUST_ID) 
(SELECT BT.BT_SNO, U.UNIT_ID ,BT.BT_UNIT,CSF.CC_UNIT_NO,BT.BT_CUSTOMER,CSF.CC_CUST_ID
FROM SOURCE_28062014.MIG_BANK_TRANSFER BT
INNER JOIN SOURCE_28062014.CUSTOMER_SCDB_FORMAT CSF
INNER JOIN UNIT U ON  BT.BT_UNIT=U.UNIT_NO AND CSF.CC_UNIT_NO=U.UNIT_NO
WHERE (BT.BT_UNIT=CSF.CC_UNIT_NO AND BT.BT_CUSTOMER=CONCAT(CSF.CC_FIRST_NAME,' ', CSF.CC_LAST_NAME))
OR (BT.BT_UNIT=CSF.CC_UNIT_NO AND BT.BT_CUSTOMER=CSF.CC_FIRST_NAME AND CSF.CC_LAST_NAME IS NULL ) GROUP BY BT.BT_SNO);
SELECT*FROM CUST;

-- GROUP BY CUSTOMER --31=28+3(DELETED)

SELECT S.BT_SNO, U.UNIT_ID,U.UNIT_NO ,BT_CUSTOMER 
FROM SOURCE_28062014.MIG_BANK_TRANSFER S
INNER JOIN UNIT U ON U.UNIT_NO=S.BT_UNIT 
WHERE S.BT_CUSTOMER NOT IN (SELECT C.BT_CUST FROM CUST C) GROUP BY S.BT_CUSTOMER;

-- ORDER BY UNITD --34=31+3(DELETED)

SELECT S.BT_SNO,U.UNIT_ID,U.UNIT_NO ,BT_CUSTOMER 
FROM SOURCE_28062014.MIG_BANK_TRANSFER S
INNER JOIN DEST_28062014.UNIT U ON U.UNIT_NO=S.BT_UNIT
WHERE S.BT_CUSTOMER NOT IN (SELECT BT_CUST FROM CUST) ORDER BY U.UNIT_ID;

-- TABLE FOR INCORRECT NAME CUSTOMER

DROP TABLE IF EXISTS CUSTNON;
CREATE TABLE CUSTNON (BTSNO INT,UNITID INT,UNITNO INT,BT_CUST VARCHAR(50));

INSERT INTO CUSTNON(BTSNO,UNITID,UNITNO,BT_CUST)
(SELECT S.BT_SNO,U.UNIT_ID,U.UNIT_NO,BT_CUSTOMER
FROM SOURCE_28062014.MIG_BANK_TRANSFER S
INNER JOIN UNIT U ON U.UNIT_NO=S.BT_UNIT
WHERE S.BT_CUSTOMER NOT IN (SELECT BT_CUST FROM CUST) ORDER BY U.UNIT_ID);
DELETE FROM CUSTNON 
WHERE BT_CUST IN('LEONG KIAN SHIANG','RIN NAN YOONG','MAUNG KHIN MAUNG WIN');
SELECT*FROM CUSTNON;

-- WRONG NAME CUSTOME WITH ID

DROP TABLE IF EXISTS CUSTNONID;
CREATE TABLE CUSTNONID (BTSNO INT,UNITID INT,BT_UNITNO INT,CC_UNITNO INT,BT_CUST VARCHAR(50),CC_CUST_ID INT);
INSERT INTO CUSTNONID(BTSNO,UNITID,BT_UNITNO,CC_UNITNO,BT_CUST,CC_CUST_ID) 
(SELECT BT.BT_SNO, U.UNIT_ID ,BT.BT_UNIT,CSF.CC_UNIT_NO,BT.BT_CUSTOMER,CSF.CC_CUST_ID
FROM SOURCE_28062014.MIG_BANK_TRANSFER BT
INNER JOIN SOURCE_28062014.CUSTOMER_SCDB_FORMAT CSF 
INNER JOIN UNIT U ON BT.BT_UNIT=U.UNIT_NO AND CSF.CC_UNIT_NO=U.UNIT_NO
INNER JOIN CUSTNON C ON CSF.CC_UNIT_NO=C.UNITNO AND BT.BT_CUSTOMER=C.BT_CUST 
WHERE (BT.BT_UNIT=CSF.CC_UNIT_NO AND BT.BT_SNO=C.BTSNO AND C.UNITNO=U.UNIT_NO 
AND BT.BT_CUSTOMER NOT IN (SELECT BT_CUST FROM CUST ))GROUP BY BT.BT_SNO);
SELECT*FROM CUSTNONID;

-- UNION ALL -- UNION ALL CUSTOMER FROM 2 TEMP TABLES

(SELECT C.* FROM CUST C 
INNER JOIN BANK_TRANSFER_DETAIL BTD 
WHERE C.BTSNO=BTD.BTD_ID AND C.UNITID=BTD.UNIT_ID AND C.CC_CUST_ID=BTD.CUSTOMER_ID) 
UNION ALL 
(SELECT CNI.*FROM CUSTNONID CNI 
INNER JOIN BANK_TRANSFER_DETAIL BTD 
WHERE CNI.BTSNO=BTD.BTD_ID AND CNI.UNITID=BTD.UNIT_ID AND CNI.CC_CUST_ID=BTD.CUSTOMER_ID);

SELECT C.UNIT,C.BT_CUST FROM CUST C UNION ALL SELECT CN.UNIT,CN.BT_CUST FROM CUSTNON CN;

-- UPDATE COLUMN AS UPPERCASE

UPDATE PROJECT_DETAILS SET PD_PROJECT_NAME=UPPER(PD_PROJECT_NAME),PD_PROJECT_DESCRIPTION=UPPER(PD_PROJECT_DESCRIPTION);

-- LOOP CONCEPT
DO_THIS_FIRST:
LOOP
  -- 1 time loop
  SET STR_LEN = SELECT CHAR_LENGTH('USER,ADMIN'); 
  SET BASICROLE = SELECT SUBSTRING_INDEX('USER,ADMIN',',',1); 
  SET BASICROLES_ID = (SELECT URC_ID FROM USER_RIGHTS_CONFIGURATION WHERE URC_DATA = 'USER');
  -- INSERTING EACH ROLES TABLE
  INSERT INTO BASIC_ROLE_PROFILE (URC_ID, BRP_BR_ID, ULD_ID) VALUES (URCID, BASICROLES_ID, USERSTAMP_ID);
  SET SUBSTR_LEN =SELECT  CHAR_LENGTH(SUBSTRING_INDEX('USER,ADMIN',',',1)) + 2;
  SET BASIC_ROLES =SELECT  MID('USER,ADMIN', 6, 10);    
  
  -- 2 time loop
  SET STR_LEN = SELECT CHAR_LENGTH('ADMIN'); 
  SET BASICROLES = SELECT SUBSTRING_INDEX('ADMIN', ',', 1); 
  SET BASICROLES_ID = (SELECT URC_ID FROM USER_RIGHTS_CONFIGURATION WHERE URC_DATA = 'ADMIN');
  -- INSERTING EACH ROLES TABLE
  INSERT INTO BASIC_ROLE_PROFILE (URC_ID, BRP_BR_ID, ULD_ID) VALUES (URCID, BASICROLES_ID, USERSTAMP_ID);
  SET SUBSTR_LEN = SELECT CHAR_LENGTH(SUBSTRING_INDEX('ADMIN', ',', 1)) + 2;
  SET BASIC_ROLES = SELECT MID('ADMIN', 7, 5);
  
  IF BASIC_ROLES = '' THEN
    LEAVE DO_THIS_FIRST;
  END IF;
END LOOP DO_THIS_FIRST;

-- LOOP AND REMOVE LAST COMMA AND DELETE

DO_THIS_DELETE:
LOOP
  -- 1 time
  SET STR_LEN1 = SELECT CHAR_LENGTH('USER,ADMIN'); 
  SET BASICROLES_1 = SELECT SUBSTRING_INDEX('USER,ADMIN', ',', 1); 
  SET BASICROLES_ID1 = (SELECT URC_ID FROM USER_RIGHTS_CONFIGURATION WHERE URC_DATA = 'USER');
  SET BS_ID = SELECT CONCAT ('',"'",3,"',");
  SET SUBSTR_LEN1 = SELECT CHAR_LENGTH(SUBSTRING_INDEX('USER,ADMIN', ',', 1)) + 2;
  SET BASIC_ROLES1 = SELECT MID('USER,ADMIN', 6,10);
  
  -- 2 time
  SET STR_LEN1 = SELECT CHAR_LENGTH('ADMIN'); 
  SET BASICROLES_1 = SELECT SUBSTRING_INDEX('ADMIN', ',', 1); 
  SET BASICROLES_ID1 = (SELECT URC_ID FROM USER_RIGHTS_CONFIGURATION WHERE URC_DATA = 'ADMIN');
  SET BS_ID = SELECT CONCAT ('3,',"'",1,"',");
  SET SUBSTR_LEN1 = SELECT CHAR_LENGTH(SUBSTRING_INDEX('ADMIN', ',', 1)) + 2;
  SET BASIC_ROLES1 = SELECT MID('ADMIN', 7, 5);
  
  --  REMOVING COMMA(,) FROM END OF THE STRING(BASIC_ROLE ID'S)
  SET BS_ID = SELECT SUBSTRING('3,1,',1,(CHAR_LENGTH('3,1,')-1) );
  --  DELETING BASIC ROLES WHICH IS NOT AVAILABLE IN THE INPUT DURING UPDATION
  DELETE FROM BASIC_ROLE_PROFILE WHERE BRP_BR_ID NOT IN (3,1) AND URC_ID =1;
  IF BASIC_ROLES1 = '' THEN
    LEAVE DO_THIS_DELETE;
  END IF;
END LOOP DO_THIS_DELETE;

-- USEING LIKE KEY
-- CITY STARTING WITH "BER":
SELECT * FROM CUSTOMERS WHERE CITY LIKE 'BER%';

-- CITY CONTAINING THE PATTERN "ES": 
SELECT * FROM CUSTOMERS WHERE CITY LIKE '%ES%';

-- CITY STARTING WITH ANY CHARACTER, FOLLOWED BY "ERLIN":
SELECT * FROM CUSTOMERS WHERE CITY LIKE '_ERLIN';

-- CITY STARTING WITH "L" FOLLOWED BY "N", FOLLOWED BY "ON":
SELECT * FROM CUSTOMERS WHERE CITY LIKE 'L_N_ON';

-- CITY STARTING WITH "B", "S", OR "P":
SELECT * FROM CUSTOMERS WHERE CITY LIKE '[BSP]%';

-- CITY STARTING WITH "A", "B", OR "C":
SELECT * FROM CUSTOMERS WHERE CITY LIKE '[A-C]%';

-- CITY NOT STARTING WITH "B", "S", OR "P":
SELECT * FROM CUSTOMERS WHERE CITY LIKE '[!BSP]%'; 
OR 
SELECT * FROM CUSTOMERSWHERE CITY NOT LIKE '[bsp]%';

-- SELECT INTO
-- SELECT VALUES FROM ONE TABLE AND INSERT INTO NEW TABLE

SELECT * INTO CUSTOMERSBACKUP2013 FROM CUSTOMERS;

-- USE THE IN CLAUSE TO COPY THE TABLE INTO ANOTHER DATABASE:

SELECT * INTO CUSTOMERSBACKUP2013 IN 'BACKUP.MDB' FROM CUSTOMERS;

-- WHILE LOOP

DROP PROCEDURE IF EXISTS WHILELOOPPROC;
CREATE PROCEDURE WHILELOOPPROC()
BEGIN
    DECLARE X  INT;
    DECLARE STR  VARCHAR(255);
    SET X = 1;
    SET STR =  '';
    WHILE X  <= 5 DO
      SET  STR = CONCAT(STR,X,',');
      SET  X = X + 1; 
    END WHILE;
    SELECT SUBSTRING(STR,1,(LENGTH(STR)-1));
END;
/*
CALL WhileLoopProc();
*/

-- REPEAT

DROP PROCEDURE IF EXISTS REPEATLOOPPROC;
CREATE PROCEDURE REPEATLOOPPROC()
BEGIN
    DECLARE X  INT;
    DECLARE STR  VARCHAR(255);
    SET X = 1;
    SET STR =  '';
    REPEAT
      SET STR = CONCAT(STR,X,',');
      SET X = X + 1; 
      UNTIL X  > 5
    END REPEAT;
    SELECT SUBSTRING(STR,1,(LENGTH(STR)-1));
END;
/*
CALL RepeatLoopProc();
*/

-- LOOP & ITERATE

DROP PROCEDURE IF EXISTS LOOPLOOPPROC;
CREATE PROCEDURE LOOPLOOPPROC()
BEGIN
  DECLARE X  INT;
  DECLARE STR  VARCHAR(255);
  SET X = 1;
  SET STR =  '';
  LOOP_LABEL:  LOOP
    IF  X > 10 THEN
      LEAVE  LOOP_LABEL;
    END IF;
    SET  X = X + 1;
    IF  (X MOD 2) THEN
      ITERATE  LOOP_LABEL;
    ELSE
      SET  STR = CONCAT(STR,X,',');
    END IF;
  END LOOP;    
  SELECT SUBSTRING(STR,1,(LENGTH(STR)-1));
END;
/*
CALL LOOPLoopProc();
*/
--LIMIT CLAUS
-- THE LIMIT CLAUSE IS USED IN THE SELECT STATEMENT TO CONSTRAIN THE NUMBER OF ROWS IN A RESULT SET. 
-- SELECT ONE ROW AT A TIME WHILE SELECT QUERY RETURN MORE THAN 1 ROW
-- THE OFFSET SPECIFIES THE OFFSET OF THE FIRST ROW TO RETURN. THE OFFSET OF THE FIRST ROW IS 0, NOT 1.
-- THE COUNT SPECIFIES MAXIMUM NUMBER OF ROWS TO RETURN FROM A TABLE EXG:15,50...
-- N IS THE HIGHEST COUNT, ITS LIKE LOOP N STARTS FROM 0

SELECT * FROM TABLE_NAME ORDER BY COLUMN_NAME ASC LIMIT n,1;
-- N=0,1,2
-- IF SET IT AS DYNAMICALLY IT WILL AUTOMATICALLY SELECT ONE ROW AT A TIME
SELECT UARD_DATE,UARD_AM_SESSION,UARD_PM_SESSION  FROM USER_ADMIN_REPORT_DETAILS WHERE ULD_ID=36 AND UARD_DATE BETWEEN "2014-07-01" AND "2014-07-31" AND UARD_ATTENDANCE=4;
SELECT UARD_DATE,UARD_AM_SESSION,UARD_PM_SESSION  FROM USER_ADMIN_REPORT_DETAILS WHERE ULD_ID=36 AND UARD_DATE BETWEEN "2014-07-01" AND "2014-07-31" AND UARD_ATTENDANCE=4 LIMIT 0,1;
SELECT UARD_DATE,UARD_AM_SESSION,UARD_PM_SESSION  FROM USER_ADMIN_REPORT_DETAILS WHERE ULD_ID=36 AND UARD_DATE BETWEEN "2014-07-01" AND "2014-07-31" AND UARD_ATTENDANCE=4 LIMIT 1,1;
SELECT UARD_DATE,UARD_AM_SESSION,UARD_PM_SESSION  FROM USER_ADMIN_REPORT_DETAILS WHERE ULD_ID=36 AND UARD_DATE BETWEEN "2014-07-01" AND "2014-07-31" AND UARD_ATTENDANCE=4 LIMIT 2,1;

-- SELECT THE VALUES WITH THE TOTAL IN THE END OF THE COLUMN

SELECT COALESCE(UARD_DATE,'TOTAL')REPORT_DATE,BANDWIDTH_MB FROM (SELECT UARD_DATE,SUM(UARD_BANDWIDTH)BANDWIDTH_MB
FROM USER_ADMIN_REPORT_DETAILS WHERE ULD_ID=@ID AND UARD_DATE BETWEEN @S AND @E GROUP	BY UARD_DATE WITH ROLLUP)FINAL;

SELECT COALESCE(UARD_DATE,'TOTAL')UARD_DATE,SUM(UARD_BANDWIDTH)UARD_BANDWIDTH
FROM USER_ADMIN_REPORT_DETAILS WHERE ULD_ID=@ID AND UARD_DATE BETWEEN @S AND @E GROUP	BY UARD_DATE WITH ROLLUP;

SELECT  SUM(UARD_BANDWIDTH)UARD_BANDWIDTH
FROM USER_ADMIN_REPORT_DETAILS WHERE ULD_ID=@ID AND UARD_DATE BETWEEN @S AND @E GROUP	BY UARD_DATE WITH ROLLUP;

-- SELECT ALL MONTH DATES FOR GIVEN RANGE

CREATE TABLE tally (n int not null primary key);

INSERT INTO tally
SELECT a.N + b.N * 10 + c.N * 100 + 1 n
  FROM 
 (SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) a
,(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) b
,(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) c
ORDER BY n;

SELECT '2015-01-01' + INTERVAL t.n - 1 DAY day
  FROM tally t
 WHERE t.n <= DATEDIFF(LAST_DAY('2015-03-01'), '2015-01-01') + 1;
 
 -- FIND THE WEEK NUMBER OF THE GIVEN MONTH
 -- EXACT
 SELECT  WEEK('2015-01-31', 5) - WEEK(DATE_SUB('2015-01-13', INTERVAL DAYOFMONTH('2015-01-13') - 1 DAY), 5) + 1;
 
 -- APROX
 SELECT FLOOR((DAYOFMONTH('2015-03-31')-1)/7)+1;